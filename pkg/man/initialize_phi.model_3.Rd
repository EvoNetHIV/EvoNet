% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vaccination_model_3.R
\name{initialize_phi.model_3}
\alias{initialize_phi.model_3}
\title{#' @export
initialize_phi.model_3 <- function(dat,at){
  
  #current phi values
  index <- 1:length(dat$vacc_model$agents)
  phi_values <- as.numeric(lapply(index,function(x) dat$vacc_model$agents[[x]]$phi))
  #for future phi_values <- get_values(index,"phi")
  
  
  #if designated vacc. level reached (percent of pop vaccianted), don't vacc anymore
  alive_index <-  dat$pop$Status>=0
  proportion_vacc <- length(which(phi_values== 1 & alive_index))/length(which(alive_index))
  if(proportion_vacc > dat$param$max_perc_vaccinated){return(dat)}
  
  vacc_rate <- (dat$param$max_perc_vaccinated*dat$param$initial_pop  )/(dat$param$vacc_rollout_dur)
  
  #temp qaqc
  vacc_rate <- (dat$param$max_perc_vaccinated*dat$param$initial_pop  )/(2*dat$param$vacc_rollout_dur)
  
  
  #if(at==(5*365)+20){browser()}
  
  #time_index <- (dat$param$start_vacc_campaign[1]+dat$param$vacc_rollout_dur) - at
  #if(time_index>0){
  #  vacc_rate <- (dat$param$max_perc_vaccinated*dat$param$initial_pop  )/(time_index)
    
  #}else{
  #  target <- dat$param$max_perc_vaccinated- proportion_vacc
  #  vacc_rate <- target*length(which( dat$pop$Status>=0 ))
  #}
  
  dat$param$vacc_per_day <- dat$param$vacc_per_day+vacc_rate
  
  #temp swith to 10 from 1 for qaqc 5/21/20
  if(dat$param$vacc_per_day>=1){
    no_vaccinated <- round(dat$param$vacc_per_day)
    dat$param$vacc_per_day <- 0
  }else{
    return(dat)
  }
  
  
  #never been vaccinated
  eligible_index1 <- which(dat$pop$Status == 0 & 
                             is.na(dat$pop$vaccinated) &
                             dat$pop$eligible_care == 1) 
  
  #previously vaccinated
  eligible_index2 <- which(dat$pop$Status == 0 & 
                             dat$pop$vaccinated == 0 &
                             (at-dat$pop$vacc_init_time) > dat$param$vacc_eff_duration &
                             dat$pop$eligible_care == 1) 
  
  eligible_index <- c(eligible_index1,eligible_index2)
  if(length(eligible_index) == 0) {return(dat)}  #if no agents are eligible
  
  
  if(no_vaccinated <length(eligible_index)){
    vaccinated_index <- sample(eligible_index, no_vaccinated)
  }else{
    vaccinated_index <- eligible_index
    #if the %coverage in total population alive exceeds #eligible, vaccinate all eligible
  }
  
  
  invisible(lapply(1:length(vaccinated_index),function(x) dat$vacc_model$agents[[vaccinated_index[x]]]$phi <<- 1 ))
  dat$pop$vacc_init_time[vaccinated_index] <- at
  #for graphing routines
  dat$pop$vaccinated[vaccinated_index] <- 1
  
  
  return(dat)
  
}}
\usage{
initialize_phi.model_3(dat, at)
}
\description{
#' @export
initialize_phi.model_3 <- function(dat,at){
  
  #current phi values
  index <- 1:length(dat$vacc_model$agents)
  phi_values <- as.numeric(lapply(index,function(x) dat$vacc_model$agents[[x]]$phi))
  #for future phi_values <- get_values(index,"phi")
  
  
  #if designated vacc. level reached (percent of pop vaccianted), don't vacc anymore
  alive_index <-  dat$pop$Status>=0
  proportion_vacc <- length(which(phi_values== 1 & alive_index))/length(which(alive_index))
  if(proportion_vacc > dat$param$max_perc_vaccinated){return(dat)}
  
  vacc_rate <- (dat$param$max_perc_vaccinated*dat$param$initial_pop  )/(dat$param$vacc_rollout_dur)
  
  #temp qaqc
  vacc_rate <- (dat$param$max_perc_vaccinated*dat$param$initial_pop  )/(2*dat$param$vacc_rollout_dur)
  
  
  #if(at==(5*365)+20){browser()}
  
  #time_index <- (dat$param$start_vacc_campaign[1]+dat$param$vacc_rollout_dur) - at
  #if(time_index>0){
  #  vacc_rate <- (dat$param$max_perc_vaccinated*dat$param$initial_pop  )/(time_index)
    
  #}else{
  #  target <- dat$param$max_perc_vaccinated- proportion_vacc
  #  vacc_rate <- target*length(which( dat$pop$Status>=0 ))
  #}
  
  dat$param$vacc_per_day <- dat$param$vacc_per_day+vacc_rate
  
  #temp swith to 10 from 1 for qaqc 5/21/20
  if(dat$param$vacc_per_day>=1){
    no_vaccinated <- round(dat$param$vacc_per_day)
    dat$param$vacc_per_day <- 0
  }else{
    return(dat)
  }
  
  
  #never been vaccinated
  eligible_index1 <- which(dat$pop$Status == 0 & 
                             is.na(dat$pop$vaccinated) &
                             dat$pop$eligible_care == 1) 
  
  #previously vaccinated
  eligible_index2 <- which(dat$pop$Status == 0 & 
                             dat$pop$vaccinated == 0 &
                             (at-dat$pop$vacc_init_time) > dat$param$vacc_eff_duration &
                             dat$pop$eligible_care == 1) 
  
  eligible_index <- c(eligible_index1,eligible_index2)
  if(length(eligible_index) == 0) {return(dat)}  #if no agents are eligible
  
  
  if(no_vaccinated <length(eligible_index)){
    vaccinated_index <- sample(eligible_index, no_vaccinated)
  }else{
    vaccinated_index <- eligible_index
    #if the %coverage in total population alive exceeds #eligible, vaccinate all eligible
  }
  
  
  invisible(lapply(1:length(vaccinated_index),function(x) dat$vacc_model$agents[[vaccinated_index[x]]]$phi <<- 1 ))
  dat$pop$vacc_init_time[vaccinated_index] <- at
  #for graphing routines
  dat$pop$vaccinated[vaccinated_index] <- 1
  
  
  return(dat)
  
}
}
